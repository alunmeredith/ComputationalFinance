{
    "collab_server" : "",
    "contents" : "load(\"tidy_data.RData\")\nsource(\"helper_functions.R\")\nlibrary(dplyr)\n\n# Set global variables\nr = 0.06\nt_mat = max(asset$date) + 1\n\n#####################################################\n### Question 2 - Estimating option value ############\n#####################################################\n\ntidy_data <- mutate(tidy_data, \n               option_estimate = Putcall(putcall = putcall,\n                                 S = asset_value,\n                                 K = strike_price,\n                                 r = r,\n                                 sigma = volatility,\n                                 t_cur = date,\n                                 t_mat = t_mat\n               )\n)\n\n#####################################################\nlambda <- function(S, K, r, volatility, date, putcall){\n    D1 <- function(S,K,r,sigma,t) {\n        denom <- sigma * sqrt(t)\n        a <- log(S/K)\n        b <- (r + sigma^2 / 2) * t\n        return((a + b) / denom)\n    }\n    d1 = D1(S, K, r, volatility,(319 - date)/365)\n    ret <- pnorm(d1)\n    ret <- ifelse(putcall == \"p\", pnorm(d1), 1 - ret)\n    return(ret)\n}\ntidy_data <- mutate(tidy_data, in_the_money = lambda(S = strike_price,\n                                                     K = asset_value,\n                                                     r = r,\n                                                     volatility = volatility,\n                                                     date = date,\n                                                     putcall = putcall)\n)\n#####################################################\n### Question 3 - Implied Volatility ################\n####################################################\n\ntidy_data <- mutate(tidy_data,\n                    vol_implied = Implied(\n                        putcall = putcall,\n                        Val_obs = option_price,\n                        S = asset_value,\n                        K = strike_price,\n                        r = r,\n                        t_cur = date)\n)\n\nvol_implied <- vector()\nfor (i in 1:nrow(tidy_data)) {\n    vol_implied[i] <- Implied(putcall = tidy_data[[i, \"putcall\"]],\n            Val_obs = tidy_data[[i, \"option_price\"]],\n            S = tidy_data[[i, \"asset_value\"]],\n            K = tidy_data[[i, \"strike_price\"]],\n            r = r,\n            t_cur = tidy_data[[i, \"date\"]],\n            interval = c(0, 100),\n            t_mat = t_mat)\n}\n\ntidy_data$vol_implied <- vol_implied\n\n#####################################################\n##### Question 4 Volatility Smile ###################\n#####################################################\n\n# Using fOption package because my estimates do not produce a good volatility smile for whatever reason, fOptions file simply uses packages to estimate volatility and Black Scholes option estimates. \nsource(\"fOptions.R\")\nvolatility_smile <- \n    tidy_data %>%\n    group_by(id) %>%\n    summarise(av_implied = mean(fOption_implied, na.rm = TRUE), \n              strike = mean(strike_price), \n              putcall = sample(putcall, 1),\n              se_implied = sd(fOption_implied, na.rm = TRUE) / sqrt(n()))\n\n#####################################################\n#### Question 5 - Binomial vs Black Scholes #########\n#####################################################\n\n# Consider 1 option with a random set of values (all others fixed)\n\n# Take fixed values from a random option in our dataset\noption <- tidy_data[sample(nrow(tidy_data),1),]\n# Randomly sample many volatilities from dataset (with replacement 10,000 times - na values)\nvols <- tidy_data$volatility[sample(nrow(tidy_data), 1000, replace = T)] %>% \n    na.omit\nbinomial_steps = 100\nBS <- matrix(ncol = binomial_steps, nrow = length(vols))\nBin <- matrix(ncol = binomial_steps, nrow = length(vols))\nfor (n in 1:binomial_steps) {\n    \n    for (i in seq_along(vols)) {\n    \n        # Estimate black scholes for each\n        BS[i,n] <- GBSOption(TypeFlag = option$putcall,\n                        S = option$asset_value,\n                        X = option$strike_price,\n                        Time = (t_mat - option$date)/365,\n                        r = r,\n                        b = 0,\n                        sigma = vols[i])@price\n        \n        Bin[i,n] <- CRRBinomialTreeOption(TypeFlag = paste0(option$putcall,\"e\"),\n                                        S = option$asset_value,\n                                        X = option$strike_price,\n                                        Time = (t_mat - option$date)/365,\n                                        r = r,\n                                        b = 0,\n                                        sigma = vols[i],\n                                        n = n\n                                        )@price\n    }\n}\nAbs_diff <- Bin - BS\nbin_v_bs <- list(option = option, vols = vols, Binomial = Bin, BlackScholes = BS, differences = Abs_diff)\n\n#######################################################\n# Real data contrast \nfor (i in c(.1, .125, .25, .5)) {\n    x <- vector()\n    for (ii in 1:nrow(tidy_data)) {\n        dt = ceiling((t_mat - tidy_data[[ii,\"date\"]]) * i)\n        print(dt)\n        x[ii] <- with(tidy_data[ii,], \n                  CRRBinomialTreeOption(TypeFlag = paste0(putcall,\"e\"), \n                                        S = asset_value, \n                                        X = strike_price, \n                                        Time = (t_mat - date)/365, r = r,\n                                        b = 0, sigma = volatility, \n                                        n = dt)\n                  )@price\n    }\n    name <- paste0(\"binom\",i)\n    tidy_data[,name] <- x\n    print(name)\n    save(tidy_data, volatility_smile, asset, train_ii, bin_v_bs, file = \"tidy_data2.RData\")\n}\n\n#####################################################\n#### Question 6 - American Vs European Binomial #####\n#####################################################\n# Using dt = 1 day\nx <- vector()\ny <- vector()\nfor (ii in 1:nrow(tidy_data)) {\n    x[ii] <- with(tidy_data[ii,], \n                  CRRBinomialTreeOption(TypeFlag = paste0(putcall,\"a\"), \n                                        S = asset_value, \n                                        X = strike_price, \n                                        Time = (t_mat - date)/365, r = r,\n                                        b = 0, sigma = volatility, \n                                        n = (t_mat - date))\n    )@price\n    y[ii] <- with(tidy_data[ii,], \n                  CRRBinomialTreeOption(TypeFlag = paste0(putcall,\"e\"), \n                                        S = asset_value, \n                                        X = strike_price, \n                                        Time = (t_mat - date)/365, r = r,\n                                        b = 0, sigma = volatility, \n                                        n = (t_mat - date))\n    )@price\n}\ni <- 1\nname <- paste0(\"binom\",i, \"_american\")\ntidy_data[,name] <- x\nname <- paste0(\"binom\",i)\ntidy_data[,name] <- y\n\n\nsave(tidy_data, volatility_smile, asset, train_ii, bin_v_bs, r, t_mat, file = \"tidy_data_fin.RData\")\nreadr::write_csv(tidy_data, \"tidy_data_fin.csv\")\n",
    "created" : 1460503073104.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2918417494",
    "id" : "F19EEF8A",
    "lastKnownWriteTime" : 1460718219,
    "last_content_update" : 1460718219655,
    "path" : "~/Southampton/Term2/ComputationalFinance/CW2/Code/UpdatedScript.R",
    "project_path" : "UpdatedScript.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}