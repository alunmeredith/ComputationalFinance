targets <- dat$delta
inputs <- as.matrix(dat[,c("time_to_maturity", "Asset_value_normalised")])
### Fitting Gaussian Mixture Model to extract means and covariance ####
library(mclust)
mixture_model <- densityMclust(inputs[train_ii,], G = 4, modelNames = "EEE") #EEE means equal covariance
plot(mixture_model, what = "density", data = inputs[train_ii,],
xlab = "Time to Maturity (years)", ylab = "Asset value / Strike Price")
covariance <- mixture_model$parameters$variance$Sigma
means <- mixture_model$parameters$mean
### Construct Design Matrix ####
Design <- design(inputs, means, covariance)
Bias <- rep(1, nrow(Design))
Design <- cbind(Design, Bias)
# Solve linear regression (least squares) to find weights
df <- as.data.frame(Design[train_ii,1:6])
df$target <- targets[train_ii]
#weights <- solve(t(Design) %*% Design) %*% t(Design) %*% targets
#weights <- lsfit(Design, targets)
model <- lm(target ~ ., data = df)
weights <- model$coefficients
W$Delta <- weights
### Predictions ###############################################
###############################################################
# Predict training set
predictions <- as.numeric(predict(model))
dat$RBS_delta[train_ii] = predictions
# Predict test set
df_test <- data.frame(Design[test_ii,1:6])
df_test$target <- targets[test_ii]
predictions_test <- predict(model, newdata = df_test[,1:6])
dat$RBS_delta[test_ii] = predictions_test
#### Evaluate predictions ################################
##########################################################
training_r_squared <- summary(model)$r.squared
training_rmse <- sqrt(mean(model$residuals^2))
train_sse <- sum( (predictions - targets[train_ii])^2 )
train_tss <- sum((targets[train_ii] - mean(targets[train_ii]))^2)
train_r_squared <- 1 - train_sse/train_tss
test_sse <- sum( (predictions_test - targets[test_ii])^2 )
test_tss <- sum( (targets[test_ii] - mean(targets[test_ii]))^2)
test_r_squared <- 1 - test_sse/test_tss
r_squareds$delta <- c(train_r_squared, test_r_squared)
# Plot 1 Predictions
plot3d(inputs[train_ii,1], inputs[train_ii,2], predictions, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Delta")
pred_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2],  predictions)
surface3d(pred_mesh$x, pred_mesh$y, pred_mesh$z, front = "lines", back = "lines", alpha = .5)
# Plot 2, prediction error
pred_err <-  predictions - targets[train_ii]
plot3d(inputs[train_ii,1], inputs[train_ii,2], pred_err, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Delta Error")
pred_err_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2], pred_err)
surface3d(pred_err_mesh$x, pred_err_mesh$y, pred_err_mesh$z, front = "lines", back = "lines", alpha = .5)
########## Try to model BS #################################################
############################################################################
############################################################################
# Save inputs and targets seperately
dat$Option_Price_normalised_BS <- dat$option_price / dat$strike_price
targets <- dat$Option_Price_normalised_BS
inputs <- as.matrix(dat[,c("time_to_maturity", "Asset_value_normalised")])
### Fitting Gaussian Mixture Model to extract means and covariance ####
library(mclust)
mixture_model <- densityMclust(inputs[train_ii,], G = 4, modelNames = "EEE") #EEE means equal covariance
plot(mixture_model, what = "density", data = inputs[train_ii,],
xlab = "Time to Maturity (years)", ylab = "Asset value / Strike Price")
covariance <- mixture_model$parameters$variance$Sigma
means <- mixture_model$parameters$mean
### Construct Design Matrix ####
Design <- design(inputs, means, covariance)
Bias <- rep(1, nrow(Design))
Design <- cbind(Design, Bias)
# Solve linear regression (least squares) to find weights
df <- as.data.frame(Design[train_ii,1:6])
df$target <- targets[train_ii]
#weights <- solve(t(Design) %*% Design) %*% t(Design) %*% targets
#weights <- lsfit(Design, targets)
model <- lm(target ~ ., data = df)
weights <- model$coefficients
W$hist <- weights
### Predictions ###############################################
###############################################################
# Predict training set
predictions <- as.numeric(predict(model))
dat$RBS_CX[train_ii] = predictions
# Predict test set
df_test <- data.frame(Design[test_ii,1:6])
df_test$target <- targets[test_ii]
predictions_test <- predict(model, newdata = df_test[,1:6])
dat$RBS_CX[test_ii] = predictions_test
# Delta predictions
deltas <- Deltas(inputs, means, covariance, dat$strike_price, weights)
dat$RBS_delta <- as.vector(deltas)
#### Evaluate predictions ################################
##########################################################
training_r_squared <- summary(model)$r.squared
training_rmse <- sqrt(mean(model$residuals^2))
train_sse <- sum( (predictions - targets[train_ii])^2 )
train_tss <- sum((targets[train_ii] - mean(targets[train_ii]))^2)
train_r_squared <- 1 - train_sse/train_tss
test_sse <- sum( (predictions_test - targets[test_ii])^2 )
test_tss <- sum( (targets[test_ii] - mean(targets[test_ii]))^2)
test_r_squared <- 1 - test_sse/test_tss
####
BS_data_sse <- sum( (dat$fOption_estimate - dat$option_price) ^2 )
BS_data_tss <- sum( (dat$option_price - mean(dat$option_price)) ^ 2 )
BS_data_r2 <- 1 - BS_data_sse / BS_data_tss
r_squareds$data_BS <- c(NA, BS_data_r2)
#names(r_squareds) <- c("BS", "Delta_derived", "Delta_trained", "RBF vs Historic", "BS vs Historic")
xtable::xtable(t(r_squareds))
W
?xtable::xtable
xtable::xtable(W, digits = 3)
xtable::xtable(W, digits = 4)
xtable::xtable(W, digits = 5)
mean()
means
M <- data.frame(row.names = 1:4)
M$BS_t <- means[1,]
# Load Data ####
library(readr)
library(dplyr)
library(rgl)
library(akima)
load("../CW2/Code/tidy_data_fin.RData")
rm(list = c("volatility_smile", "bin_v_bs", "asset", "train_ii"))
# Add normalised variables to data
dat <- filter(tidy_data, putcall == "c") %>%
dplyr::select(-putcall) %>%
mutate(time_to_maturity = (t_mat - date) / 365,
Asset_value_normalised = asset_value / strike_price,
Option_Price_normalised = fOption_estimate / strike_price) %>%
na.omit
### Compute Historic Delta Values
delta <- vector(length = nrow(dat))
for (i in 1:nrow(dat)) {
delta[i] <- fOptions::GBSGreeks("delta", "c", dat$asset_value[i],
dat$strike_price[i], dat$time_to_maturity[i],
r, 0, dat$volatility[i])
}
dat$delta <- delta
# Save inputs and targets seperately
inputs <- as.matrix(dat[,c("time_to_maturity", "Asset_value_normalised")])
#inputs <- as.matrix(dat[,c("Asset_value_normalised", "time_to_maturity")])
targets <- dat$Option_Price_normalised
write.csv(inputs, "inputs.csv")
write.csv(targets, "targets.csv")
## Split into training and testing set
N <- nrow(dat)
train_ii <- sample(1:nrow(dat), floor(N*0.6)) #dat$date < 250
test_ii <- sample(1:nrow(dat), floor(N*0.6)) #dat$date >= 250
#### Build Model #########################################################
##########################################################################
### Fitting Gaussian Mixture Model to extract means and covariance ####
library(mclust)
mixture_model <- densityMclust(inputs[train_ii,], G = 4, modelNames = "EEE") #EEE means equal covariance
plot(mixture_model, what = "density", data = inputs[train_ii,],
xlab = "Time to Maturity (years)", ylab = "Asset value / Strike Price")
covariance <- mixture_model$parameters$variance$Sigma
means <- mixture_model$parameters$mean
### Construct Design Matrix ####
design <- function(points, means, cov){
Design <- matrix(nrow = nrow(points), ncol = 6)
Design[,1:4] <- apply(means, 2, function(m) sqrt(mahalanobis(points, center = m, cov = cov)))
Design[,5:6] <- points
colnames(Design) <- c("mahal_RBF1", "mahal_RBF2", "mahal_RBF3", "mahal_RBF4", "t_mat", "Asset_norm")
return(Design)
}
Design <- design(inputs, means, covariance)
Bias <- rep(1, nrow(Design))
Design <- cbind(Design, Bias)
write.csv(Design, "Design.csv")
# Solve linear regression (least squares) to find weights
df <- as.data.frame(Design[train_ii,1:6])
df$target <- targets[train_ii]
#weights <- solve(t(Design) %*% Design) %*% t(Design) %*% targets
#weights <- lsfit(Design, targets)
model <- lm(target ~ ., data = df)
weights <- model$coefficients
W <- data.frame(row.names = names(weights))
M <- data.frame(row.names = 1:4)
W$BS <- weights
M$BS_t <- means[1,]
M$BS_SX <- means[2,]
### Predictions ###############################################
###############################################################
# Predict training set
predictions <- as.numeric(predict(model))
dat$RBS_CX[train_ii] = predictions
# Predict test set
df_test <- data.frame(Design[test_ii,1:6])
df_test$target <- targets[test_ii]
predictions_test <- predict(model, newdata = df_test[,1:6])
dat$RBS_CX[test_ii] = predictions_test
# Delta predictions
Deltas <- function(points, means, cov, strike, weights) {
N = nrow(points)
delta <- rep(0,N)
for (i in 1:N) {
point <- points[i,]
X <- strike[i]
dx_dS <- c(1, 0)
for (j in 1:4) {
xm <- point - means[,j]
delta[i] <- delta[i] +
weights[j + 1] * (t(xm) %*% cov %*% dx_dS) * (t(xm) %*% cov %*% xm) ^ (-1/2)
}
delta[i] <- delta[i] + weights[7] * dx_dS[1]
}
return(delta)
}
deltas <- Deltas(inputs, means, covariance, dat$strike_price, weights)
dat$RBS_delta <- as.vector(deltas)
#### Evaluate predictions ################################
##########################################################
train_sse <- sum( (predictions - targets[train_ii])^2 )
train_tss <- sum((targets[train_ii] - mean(targets[train_ii]))^2)
train_r_squared <- 1 - train_sse/train_tss
test_sse <- sum( (predictions_test - targets[test_ii])^2 )
test_tss <- sum( (targets[test_ii] - mean(targets[test_ii]))^2)
test_r_squared <- 1 - test_sse/test_tss
r_squareds <- data.frame(row.names = c("train", "test"))
r_squareds$hist <- c(train_r_squared, test_r_squared)
#### Plots ################################################
###########################################################
# Plot 1 Predictions
plot3d(inputs[train_ii,1], inputs[train_ii,2], predictions, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Option Value / Strike Price")
pred_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2],  predictions)
surface3d(pred_mesh$x, pred_mesh$y, pred_mesh$z, front = "lines", back = "lines", alpha = .5)
# Plot 2, prediction error
pred_err <- predictions - targets[train_ii]
plot3d(inputs[train_ii,1], inputs[train_ii,2], pred_err, ylab = "Time to Maturity", xlab = "Asset Price / Strike Price", zlab = "Option Value / Strike Price")
pred_err_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2], pred_err)
surface3d(pred_err_mesh$x, pred_err_mesh$y, pred_err_mesh$z, front = "lines", back = "lines", alpha = .5)
# Plot deltas
plot3d(inputs[,1], inputs[,2], dat$RBS_delta, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Delta Esimate")
pred_mesh <- interp(inputs[,1], inputs[,2], dat$RBS_delta)
surface3d(pred_mesh$x, pred_mesh$y, pred_mesh$z, front = "lines", back = "lines", alpha = .5)
# Plot 4, Delta Error
delta_err <- dat$RBS_delta - dat$delta
plot3d(inputs[,1], inputs[,2], delta_err, ylab = "Time to Maturity", xlab = "Asset Price / Strike Price", zlab = "Delta Error")
delta_err_mesh <- interp(inputs[,1], inputs[,2], delta_err)
surface3d(delta_err_mesh$x, delta_err_mesh$y, delta_err_mesh$z, front = "lines", back = "lines", alpha = .5)
# Derivved delta R2
train_sse <- sum( (dat$RBS_delta[train_ii] - dat$delta[train_ii])^2 )
train_tss <- sum((dat$delta[train_ii] - mean(dat$delta[train_ii])^2))
train_r_squared <- 1 - train_sse/train_tss
test_sse <- sum( (dat$RBS_delta[test_ii] - dat$delta[test_ii])^2 )
test_tss <- sum((dat$delta[test_ii] - mean(dat$delta[test_ii])^2))
test_r_squared <- 1 - test_sse/test_tss
r_squareds$delta_derived <- c(train_r_squared, test_r_squared)
########## Try to model deltas #############################################
############################################################################
############################################################################
# Save inputs and targets seperately
targets <- dat$delta
inputs <- as.matrix(dat[,c("time_to_maturity", "Asset_value_normalised")])
### Fitting Gaussian Mixture Model to extract means and covariance ####
library(mclust)
mixture_model <- densityMclust(inputs[train_ii,], G = 4, modelNames = "EEE") #EEE means equal covariance
plot(mixture_model, what = "density", data = inputs[train_ii,],
xlab = "Time to Maturity (years)", ylab = "Asset value / Strike Price")
covariance <- mixture_model$parameters$variance$Sigma
means <- mixture_model$parameters$mean
### Construct Design Matrix ####
Design <- design(inputs, means, covariance)
Bias <- rep(1, nrow(Design))
Design <- cbind(Design, Bias)
# Solve linear regression (least squares) to find weights
df <- as.data.frame(Design[train_ii,1:6])
df$target <- targets[train_ii]
#weights <- solve(t(Design) %*% Design) %*% t(Design) %*% targets
#weights <- lsfit(Design, targets)
model <- lm(target ~ ., data = df)
weights <- model$coefficients
W$Delta <- weights
M$Delta_t <- means[1,]
M$Delta_SX <- means[2,]
### Predictions ###############################################
###############################################################
# Predict training set
predictions <- as.numeric(predict(model))
dat$RBS_delta[train_ii] = predictions
# Predict test set
df_test <- data.frame(Design[test_ii,1:6])
df_test$target <- targets[test_ii]
predictions_test <- predict(model, newdata = df_test[,1:6])
dat$RBS_delta[test_ii] = predictions_test
#### Evaluate predictions ################################
##########################################################
training_r_squared <- summary(model)$r.squared
training_rmse <- sqrt(mean(model$residuals^2))
train_sse <- sum( (predictions - targets[train_ii])^2 )
train_tss <- sum((targets[train_ii] - mean(targets[train_ii]))^2)
train_r_squared <- 1 - train_sse/train_tss
test_sse <- sum( (predictions_test - targets[test_ii])^2 )
test_tss <- sum( (targets[test_ii] - mean(targets[test_ii]))^2)
test_r_squared <- 1 - test_sse/test_tss
r_squareds$delta <- c(train_r_squared, test_r_squared)
# Plot 1 Predictions
plot3d(inputs[train_ii,1], inputs[train_ii,2], predictions, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Delta")
pred_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2],  predictions)
surface3d(pred_mesh$x, pred_mesh$y, pred_mesh$z, front = "lines", back = "lines", alpha = .5)
# Plot 2, prediction error
pred_err <-  predictions - targets[train_ii]
plot3d(inputs[train_ii,1], inputs[train_ii,2], pred_err, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Delta Error")
pred_err_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2], pred_err)
surface3d(pred_err_mesh$x, pred_err_mesh$y, pred_err_mesh$z, front = "lines", back = "lines", alpha = .5)
########## Try to model BS #################################################
############################################################################
############################################################################
# Save inputs and targets seperately
dat$Option_Price_normalised_BS <- dat$option_price / dat$strike_price
targets <- dat$Option_Price_normalised_BS
inputs <- as.matrix(dat[,c("time_to_maturity", "Asset_value_normalised")])
### Fitting Gaussian Mixture Model to extract means and covariance ####
library(mclust)
mixture_model <- densityMclust(inputs[train_ii,], G = 4, modelNames = "EEE") #EEE means equal covariance
plot(mixture_model, what = "density", data = inputs[train_ii,],
xlab = "Time to Maturity (years)", ylab = "Asset value / Strike Price")
covariance <- mixture_model$parameters$variance$Sigma
means <- mixture_model$parameters$mean
### Construct Design Matrix ####
Design <- design(inputs, means, covariance)
Bias <- rep(1, nrow(Design))
Design <- cbind(Design, Bias)
# Solve linear regression (least squares) to find weights
df <- as.data.frame(Design[train_ii,1:6])
df$target <- targets[train_ii]
#weights <- solve(t(Design) %*% Design) %*% t(Design) %*% targets
#weights <- lsfit(Design, targets)
model <- lm(target ~ ., data = df)
weights <- model$coefficients
W$hist <- weights
M$hist_t <- means[1,]
M$hist_SX <- means[2,]
### Predictions ###############################################
###############################################################
# Predict training set
predictions <- as.numeric(predict(model))
dat$RBS_CX[train_ii] = predictions
# Predict test set
df_test <- data.frame(Design[test_ii,1:6])
df_test$target <- targets[test_ii]
predictions_test <- predict(model, newdata = df_test[,1:6])
dat$RBS_CX[test_ii] = predictions_test
# Delta predictions
deltas <- Deltas(inputs, means, covariance, dat$strike_price, weights)
dat$RBS_delta <- as.vector(deltas)
#### Evaluate predictions ################################
##########################################################
training_r_squared <- summary(model)$r.squared
training_rmse <- sqrt(mean(model$residuals^2))
train_sse <- sum( (predictions - targets[train_ii])^2 )
train_tss <- sum((targets[train_ii] - mean(targets[train_ii]))^2)
train_r_squared <- 1 - train_sse/train_tss
test_sse <- sum( (predictions_test - targets[test_ii])^2 )
test_tss <- sum( (targets[test_ii] - mean(targets[test_ii]))^2)
test_r_squared <- 1 - test_sse/test_tss
####
BS_data_sse <- sum( (dat$fOption_estimate - dat$option_price) ^2 )
BS_data_tss <- sum( (dat$option_price - mean(dat$option_price)) ^ 2 )
BS_data_r2 <- 1 - BS_data_sse / BS_data_tss
r_squareds$data_BS <- c(NA, BS_data_r2)
#names(r_squareds) <- c("BS", "Delta_derived", "Delta_trained", "RBF vs Historic", "BS vs Historic")
xtable::xtable(t(r_squareds))
M
paste0("m", 1:4)
M <- M[,1:2]
colnames(M) <- c("t_mat", "SX")
rownames(M) <- paste0("m_", 1:4)
xtable::xtable(M, digits = 3)
cov
covariance
library(xtable)
xtable(as.matrix(covariance))
xtable(as.matrix(covariance)*1000)
# Plot 2, prediction error
pred_err <-  predictions - targets[train_ii]
plot3d(inputs[train_ii,1], inputs[train_ii,2], pred_err, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Delta Error")
pred_err_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2], pred_err)
surface3d(pred_err_mesh$x, pred_err_mesh$y, pred_err_mesh$z, front = "lines", back = "lines", alpha = .5)
plot3d(inputs[train_ii,1], inputs[train_ii,2], predictions, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Delta")
pred_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2],  predictions)
surface3d(pred_mesh$x, pred_mesh$y, pred_mesh$z, front = "lines", back = "lines", alpha = .5)
pred_err <-  predictions - targets[train_ii]
plot3d(inputs[train_ii,1], inputs[train_ii,2], pred_err, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Delta Error")
pred_err_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2], pred_err)
surface3d(pred_err_mesh$x, pred_err_mesh$y, pred_err_mesh$z, front = "lines", back = "lines", alpha = .5)
delta_err <- dat$RBS_delta - dat$delta
plot3d(inputs[,1], inputs[,2], delta_err, ylab = "Time to Maturity", xlab = "Asset Price / Strike Price", zlab = "Delta Error")
delta_err_mesh <- interp(inputs[,1], inputs[,2], delta_err)
surface3d(delta_err_mesh$x, delta_err_mesh$y, delta_err_mesh$z, front = "lines", back = "lines", alpha = .5)
delta_err <- dat$RBS_delta - dat$delta
plot3d(inputs[,1], inputs[,2], delta_err, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Delta Error")
delta_err_mesh <- interp(inputs[,1], inputs[,2], delta_err)
surface3d(delta_err_mesh$x, delta_err_mesh$y, delta_err_mesh$z, front = "lines", back = "lines", alpha = .5)
# Load Data ####
library(readr)
library(dplyr)
library(rgl)
library(akima)
load("../CW2/Code/tidy_data_fin.RData")
rm(list = c("volatility_smile", "bin_v_bs", "asset", "train_ii"))
# Add normalised variables to data
dat <- filter(tidy_data, putcall == "c") %>%
dplyr::select(-putcall) %>%
mutate(time_to_maturity = (t_mat - date) / 365,
Asset_value_normalised = asset_value / strike_price,
Option_Price_normalised = fOption_estimate / strike_price) %>%
na.omit
### Compute Historic Delta Values
delta <- vector(length = nrow(dat))
for (i in 1:nrow(dat)) {
delta[i] <- fOptions::GBSGreeks("delta", "c", dat$asset_value[i],
dat$strike_price[i], dat$time_to_maturity[i],
r, 0, dat$volatility[i])
}
dat$delta <- delta
# Save inputs and targets seperately
inputs <- as.matrix(dat[,c("time_to_maturity", "Asset_value_normalised")])
#inputs <- as.matrix(dat[,c("Asset_value_normalised", "time_to_maturity")])
targets <- dat$Option_Price_normalised
write.csv(inputs, "inputs.csv")
write.csv(targets, "targets.csv")
## Split into training and testing set
N <- nrow(dat)
train_ii <- sample(1:nrow(dat), floor(N*0.6)) #dat$date < 250
test_ii <- sample(1:nrow(dat), floor(N*0.6)) #dat$date >= 250
#### Build Model #########################################################
##########################################################################
### Fitting Gaussian Mixture Model to extract means and covariance ####
library(mclust)
mixture_model <- densityMclust(inputs[train_ii,], G = 4, modelNames = "EEE") #EEE means equal covariance
plot(mixture_model, what = "density", data = inputs[train_ii,],
xlab = "Time to Maturity (years)", ylab = "Asset value / Strike Price")
covariance <- mixture_model$parameters$variance$Sigma
means <- mixture_model$parameters$mean
### Construct Design Matrix ####
design <- function(points, means, cov){
Design <- matrix(nrow = nrow(points), ncol = 6)
Design[,1:4] <- apply(means, 2, function(m) sqrt(mahalanobis(points, center = m, cov = cov)))
Design[,5:6] <- points
colnames(Design) <- c("mahal_RBF1", "mahal_RBF2", "mahal_RBF3", "mahal_RBF4", "t_mat", "Asset_norm")
return(Design)
}
Design <- design(inputs, means, covariance)
Bias <- rep(1, nrow(Design))
Design <- cbind(Design, Bias)
write.csv(Design, "Design.csv")
# Solve linear regression (least squares) to find weights
df <- as.data.frame(Design[train_ii,1:6])
df$target <- targets[train_ii]
#weights <- solve(t(Design) %*% Design) %*% t(Design) %*% targets
#weights <- lsfit(Design, targets)
model <- lm(target ~ ., data = df)
weights <- model$coefficients
W <- data.frame(row.names = names(weights))
M <- data.frame(row.names = 1:4)
W$BS <- weights
M$BS_t <- means[1,]
M$BS_SX <- means[2,]
### Predictions ###############################################
###############################################################
# Predict training set
predictions <- as.numeric(predict(model))
dat$RBS_CX[train_ii] = predictions
# Predict test set
df_test <- data.frame(Design[test_ii,1:6])
df_test$target <- targets[test_ii]
predictions_test <- predict(model, newdata = df_test[,1:6])
dat$RBS_CX[test_ii] = predictions_test
# Delta predictions
Deltas <- function(points, means, cov, strike, weights) {
N = nrow(points)
delta <- rep(0,N)
for (i in 1:N) {
point <- points[i,]
X <- strike[i]
dx_dS <- c(1, 0)
for (j in 1:4) {
xm <- point - means[,j]
delta[i] <- delta[i] +
weights[j + 1] * (t(xm) %*% cov %*% dx_dS) * (t(xm) %*% cov %*% xm) ^ (-1/2)
}
delta[i] <- delta[i] + weights[7] * dx_dS[1]
}
return(delta)
}
deltas <- Deltas(inputs, means, covariance, dat$strike_price, weights)
dat$RBS_delta <- as.vector(deltas)
#### Evaluate predictions ################################
##########################################################
train_sse <- sum( (predictions - targets[train_ii])^2 )
train_tss <- sum((targets[train_ii] - mean(targets[train_ii]))^2)
train_r_squared <- 1 - train_sse/train_tss
test_sse <- sum( (predictions_test - targets[test_ii])^2 )
test_tss <- sum( (targets[test_ii] - mean(targets[test_ii]))^2)
test_r_squared <- 1 - test_sse/test_tss
r_squareds <- data.frame(row.names = c("train", "test"))
r_squareds$hist <- c(train_r_squared, test_r_squared)
#### Plots ################################################
###########################################################
# Plot 1 Predictions
plot3d(inputs[train_ii,1], inputs[train_ii,2], predictions, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Option Value / Strike Price")
pred_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2],  predictions)
surface3d(pred_mesh$x, pred_mesh$y, pred_mesh$z, front = "lines", back = "lines", alpha = .5)
# Plot 2, prediction error
pred_err <- predictions - targets[train_ii]
plot3d(inputs[train_ii,1], inputs[train_ii,2], pred_err, xlab = "Time to Maturity", ylab = "Asset Price / Strike Price", zlab = "Option Value / Strike Price")
pred_err_mesh <- interp(inputs[train_ii,1], inputs[train_ii,2], pred_err)
surface3d(pred_err_mesh$x, pred_err_mesh$y, pred_err_mesh$z, front = "lines", back = "lines", alpha = .5)
r_squard
r_squareds
source('~/Southampton/Term2/ComputationalFinance/CW3/test.R')
